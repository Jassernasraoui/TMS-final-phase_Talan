page 73638 "Tal Planning Dashboard"
{
    PageType = Document;
    ApplicationArea = All;
    UsageCategory = Tasks;
    SourceTable = "Planning Lines";
    Caption = 'Dashboard de Planning des Tourn√©es';

    layout
    {
        area(Content)
        {
            group(Calendar)
            {
                Caption = '';
                part(PlanningCalendar; "Tal Simple Calendar Page")
                {
                    ApplicationArea = All;
                    Caption = 'Calendrier';
                    UpdatePropagation = Both;
                }
            }
            group(Map)
            {
                Caption = '';
                part(PlanningMap; "Tal Planning Map Page")
                {
                    ApplicationArea = All;
                    Caption = 'Carte de Planning';
                    UpdatePropagation = Both;
                }
            }

            part(PlanningLinesPart; "Planning Lines Subpage")
            {
                ApplicationArea = All;
                Caption = 'Lignes de Planning';
                UpdatePropagation = Both;
            }
        }
    }

    actions
    {
        area(Processing)
        {
            action(RefreshAll)
            {
                ApplicationArea = All;
                Caption = 'üîÑ Actualiser Tout';
                ToolTip = 'Actualiser toutes les donn√©es';
                Image = Refresh;

                trigger OnAction()
                begin
                    CurrPage.Update(false);
                    Message('‚úÖ Dashboard actualis√©');
                end;
            }

            action(FilterByMonth)
            {
                ApplicationArea = All;
                Caption = 'üìÖ Mois Actuel';
                ToolTip = 'Filtrer par mois actuel';
                Image = Calendar;

                trigger OnAction()
                var
                    StartDate: Date;
                    EndDate: Date;
                begin
                    // Calculer le premier et dernier jour du mois
                    StartDate := CalcDate('<-CM>', WorkDate());
                    EndDate := CalcDate('<CM>', WorkDate());

                    // Appliquer le filtre
                    Rec.Reset();
                    Rec.SetFilter("Expected Shipment Date", '%1..%2', StartDate, EndDate);
                    CurrPage.Update(false);

                    Message('üìÖ Filtrage par mois : %1 - %2',
                        Format(StartDate, 0, '<Day,2>/<Month,2>/<Year4>'),
                        Format(EndDate, 0, '<Day,2>/<Month,2>/<Year4>'));
                end;
            }

            action(ShowAllData)
            {
                ApplicationArea = All;
                Caption = 'üëÅÔ∏è Tout Afficher';
                ToolTip = 'Afficher toutes les donn√©es';
                Image = AllLines;

                trigger OnAction()
                begin
                    Rec.Reset();
                    CurrPage.Update(false);
                    Message('üëÅÔ∏è Affichage de toutes les donn√©es');
                end;
            }

            action(CalculateOptimalRoute)
            {
                ApplicationArea = All;
                Caption = 'üõ£Ô∏è Calculer Route Optimale';
                ToolTip = 'Calculer la route optimale pour toutes les livraisons';
                Image = GetEntries;
                Promoted = true;
                PromotedCategory = Process;
                PromotedIsBig = true;

                trigger OnAction()
                var
                    MapPage: Page "Tal Planning Map Page";
                    PlanningLine: Record "Planning Lines";
                    StartLocationId: Text;
                begin
                    // Utiliser la ligne actuelle comme point de d√©part ou prendre la premi√®re ligne
                    if Rec."Line No." <> 0 then
                        StartLocationId := Format(Rec."Line No.")
                    else begin
                        PlanningLine.Reset();
                        if PlanningLine.FindFirst() then
                            StartLocationId := Format(PlanningLine."Line No.")
                        else
                            StartLocationId := '0'; // Valeur par d√©faut
                    end;

                    // Ouvrir temporairement la page Map pour ex√©cuter l'action
                    MapPage.SetRecord(Rec);
                    // Utiliser l'action plut√¥t que d'appeler la proc√©dure directement
                    MapPage.RunModal();

                    Message('üßÆ Calcul de l''itin√©raire optimal en cours...');

                    // Rafra√Æchir la page principale
                    CurrPage.Update(false);
                end;
            }

            action(CreateLoadingDocument)
            {
                ApplicationArea = All;
                Caption = 'üìã Cr√©er Document Pr√©paration';
                ToolTip = 'Cr√©er un document de pr√©paration bas√© sur l''itin√©raire optimis√©';
                Image = NewDocument;
                Promoted = true;
                PromotedCategory = Process;
                PromotedIsBig = true;
                Visible = false; // Masquer temporairement jusqu'√† ce que les tables requises soient disponibles

                trigger OnAction()
                begin
                    Message('Cette fonctionnalit√© sera disponible dans une version future.');
                end;
            }
        }

        area(Navigation)
        {
            action(ViewCalendar)
            {
                ApplicationArea = All;
                Caption = 'üìÖ Vue Calendrier';
                ToolTip = 'Afficher la vue calendrier';
                Image = Calendar;

                trigger OnAction()
                var
                    CalendarPage: Page "Tal Simple Calendar Page";
                begin
                    CalendarPage.SetRecord(Rec);
                    CalendarPage.Run();
                end;
            }

            action(ViewMap)
            {
                ApplicationArea = All;
                Caption = 'üó∫Ô∏è Vue Carte';
                ToolTip = 'Afficher la vue carte';
                Image = Map;

                trigger OnAction()
                var
                    MapPage: Page "Tal Planning Map Page";
                begin
                    MapPage.SetRecord(Rec);
                    MapPage.Run();
                end;
            }
        }
    }

    trigger OnOpenPage()
    begin
        // D√©finir un filtre par d√©faut pour montrer uniquement les donn√©es pertinentes
        Rec.SetRange("Expected Shipment Date", CalcDate('<-10D>', WorkDate()), CalcDate('<+30D>', WorkDate()));
    end;

    local procedure ConfirmCalculateRoute(): Boolean
    var
        ConfirmMsg: Label 'Voulez-vous calculer l''itin√©raire optimal avant de cr√©er le document de pr√©paration?';
    begin
        // Si l'itin√©raire n'a pas d√©j√† √©t√© calcul√©, proposer de le faire
        if Dialog.Confirm(ConfirmMsg, true) then begin
            // Lancer l'action depuis la page (au lieu d'appeler directement la m√©thode)
            CurrPage.PlanningMap.Page.RunModal();
            Commit(); // S'assurer que les modifications sont enregistr√©es
            Sleep(2000); // Attendre que le calcul soit termin√©
            exit(true);
        end;

        exit(true); // Continuer m√™me sans calcul
    end;

    local procedure GenerateOptimizedStopLines(LoadingNo: Code[20])
    begin
        // Cette fonctionnalit√© sera impl√©ment√©e dans une version future
        Message('G√©n√©ration des lignes d''arr√™t optimis√©es sera disponible dans une version future.');
    end;
}