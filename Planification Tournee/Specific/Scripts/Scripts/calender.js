// calender.js - Script principal pour le calendrier de planning
(function () {
    console.log("üöÄ StartupScript: Initialisation du calendrier...");
    
    // Variable globale pour √©viter les initialisations multiples
    window.CalendarInitialized = window.CalendarInitialized || false;
    
    // Fonction principale d'initialisation
    function initializeCalendar() {
        // √âviter les initialisations multiples
        if (window.CalendarInitialized) {
            console.log("üìÖ Calendrier d√©j√† initialis√©, arr√™t");
            return;
        }
        
        console.log("üìÖ Cr√©ation de l'interface calendrier...");
        
        try {
            // Charger FullCalendar et ses d√©pendances
            loadExternalScripts([
                'https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js',
                'https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/locales/fr.js'
            ], function() {
                loadExternalStyles([
                    'https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css'
                ], function() {
                    // Une fois les scripts charg√©s, cr√©er l'interface
                    createCalendarInterface();
                });
            });
            
        } catch (error) {
            console.error("‚ùå Erreur lors de l'initialisation:", error);
            document.body.innerHTML = `
                <div style="padding: 20px; color: red;">
                    <h3>‚ùå Erreur d'initialisation</h3>
                    <p>D√©tails: ${error.message}</p>
                </div>
            `;
        }
    }

    // Charger des scripts externes de fa√ßon s√©quentielle
    function loadExternalScripts(urls, callback, index = 0) {
        if (index >= urls.length) {
            if (callback) callback();
            return;
        }
        
        const script = document.createElement('script');
        script.src = urls[index];
        script.onload = function() {
            loadExternalScripts(urls, callback, index + 1);
        };
        script.onerror = function() {
            console.error("Erreur de chargement du script:", urls[index]);
            loadExternalScripts(urls, callback, index + 1);
        };
        document.head.appendChild(script);
    }

    // Charger des feuilles de style externes
    function loadExternalStyles(urls, callback) {
        let loaded = 0;
        
        for (const url of urls) {
            const link = document.createElement('link');
            link.rel = 'stylesheet';
            link.href = url;
            link.onload = function() {
                loaded++;
                if (loaded === urls.length && callback) callback();
            };
            link.onerror = function() {
                console.error("Erreur de chargement du style:", url);
                loaded++;
                if (loaded === urls.length && callback) callback();
            };
            document.head.appendChild(link);
        }
        
        // Si aucun style √† charger, ex√©cuter le callback imm√©diatement
        if (urls.length === 0 && callback) callback();
    }
    
    function createCalendarInterface() {
        // Nettoyer le contenu existant
        document.body.innerHTML = '';
        
        // Cr√©er la structure HTML
        const calendarHTML = `
            <div id="calendarWrapper">
                <div id="planningCalendarContainer">
                    <div id="calendarHeader">
                        <h3>üìÖ Calendrier Planning</h3>
                        <div id="status">‚úÖ Pr√™t</div>
                    </div>
                    <div id="calendar"></div>
                </div>
                <div id="planningDetails">
                    <h3>üìã D√©tails Planning</h3>
                    <div id="selectedDateInfo">
                        <p>üëâ S√©lectionnez une date sur le calendrier</p>
                    </div>
                    <div id="planningData"></div>
                </div>
            </div>
        `;
        
        document.body.innerHTML = calendarHTML;
        
        // Initialiser FullCalendar
        initFullCalendar();
        
        // Marquer comme initialis√©
        window.CalendarInitialized = true;
        
        // Notifier AL que le contr√¥le est pr√™t
        notifyControlReady();
        
        console.log("‚úÖ Calendrier initialis√© avec succ√®s");
    }
    
    function initFullCalendar() {
        const calendarEl = document.getElementById('calendar');
        if (!calendarEl) {
            console.error("√âl√©ment calendar non trouv√©");
            return;
        }
        
        // Cr√©er l'instance du calendrier
        window.planningCalendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,listWeek'
            },
            locale: 'fr',
            businessHours: {
                daysOfWeek: [1, 2, 3, 4, 5], // Lundi - Vendredi
                startTime: '08:00',
                endTime: '18:00',
            },
            selectable: true,
            selectMirror: true,
            dayMaxEvents: true,
            eventDisplay: 'block',
            eventColor: '#0078d4',
            
            // √âv√©nements de s√©lection et de clic
            dateClick: function(info) {
                handleDateSelection(info.dateStr);
            },
            select: function(info) {
                handleDateSelection(info.startStr);
            },
            eventClick: function(info) {
                // Pour l'instant, s√©lectionner simplement la date de l'√©v√©nement
                handleDateSelection(info.event.startStr.split('T')[0]);
            }
        });
        
        // Afficher le calendrier
        window.planningCalendar.render();
        
        // Ajouter des donn√©es de d√©monstration (en mode d√©veloppement)
        addSampleEvents();
    }
    
    function addSampleEvents() {
        // Seulement en mode d√©veloppement pour tester l'affichage
        try {
            if (typeof Microsoft === 'undefined') { // En mode d√©veloppement
                const today = new Date();
                const events = [];
                
                // G√©n√©rer quelques √©v√©nements pour les 2 prochaines semaines
                for (let i = -5; i < 15; i++) {
                    if (Math.random() > 0.7) { // Ajouter un √©v√©nement al√©atoirement
                        const date = new Date(today);
                        date.setDate(date.getDate() + i);
                        const dateStr = date.toISOString().split('T')[0];
                        
                        const eventCount = Math.floor(Math.random() * 3) + 1;
                        const eventTitle = `${eventCount} livraison${eventCount > 1 ? 's' : ''}`;
                        
                        events.push({
                            title: eventTitle,
                            start: dateStr,
                            backgroundColor: getRandomColor(eventCount),
                            borderColor: getRandomColor(eventCount),
                            extendedProps: {
                                count: eventCount
                            }
                        });
                    }
                }
                
                // Ajouter les √©v√©nements au calendrier
                window.planningCalendar.addEventSource(events);
            }
        } catch (e) {
            console.log("Mode d√©veloppement - pas d'ajout d'√©v√©nements de test");
        }
    }
    
    function getRandomColor(count) {
        // Couleurs en fonction du nombre d'√©v√©nements
        const colors = [
            '#0078d4', // Bleu - par d√©faut
            '#107c10', // Vert - peu d'√©v√©nements
            '#ffaa44', // Orange - √©v√©nements mod√©r√©s
            '#d13438'  // Rouge - beaucoup d'√©v√©nements
        ];
        
        if (count <= 1) return colors[1];      // Vert pour 1 √©v√©nement
        else if (count <= 3) return colors[2]; // Orange pour 2-3 √©v√©nements
        else return colors[3];                 // Rouge pour 4+ √©v√©nements
    }
    
    function handleDateSelection(dateStr) {
        console.log("üìÖ Date s√©lectionn√©e:", dateStr);
        
        // Mise √† jour de l'interface
        updateStatus("üîÑ Envoi en cours...", "#0078d4");
        updateSelectedDateInfo(dateStr, true);
        
        // Envoyer vers AL
        sendDateToBusinessCentral(dateStr);
        
        // Mettre en √©vidence la date s√©lectionn√©e
        highlightSelectedDate(dateStr);
    }
    
    function highlightSelectedDate(dateStr) {
        // R√©initialiser les s√©lections pr√©c√©dentes
        document.querySelectorAll('.fc-day-today').forEach(el => {
            el.classList.remove('fc-day-today');
        });
        
        // Trouver la cellule correspondant √† la date et la mettre en √©vidence
        const dateCell = document.querySelector(`.fc-day[data-date="${dateStr}"]`);
        if (dateCell) {
            dateCell.classList.add('fc-day-today');
        }
        
        // Naviguer vers cette date si elle n'est pas visible
        window.planningCalendar.gotoDate(dateStr);
    }
    
    function updateStatus(message, color = "#605e5c") {
        const status = document.getElementById("status");
        if (status) {
            status.textContent = message;
            status.style.color = color;
        }
    }
    
    function updateSelectedDateInfo(selectedDate, isLoading = false) {
        const selectedDateInfo = document.getElementById("selectedDateInfo");
        if (!selectedDateInfo) return;
        
        const formattedDate = formatDate(selectedDate);
        
        if (isLoading) {
            selectedDateInfo.innerHTML = `
                <h4>üìÖ ${formattedDate}</h4>
                <p>üîÑ Transmission vers Business Central...</p>
            `;
        } else {
            selectedDateInfo.innerHTML = `
                <h4>üìÖ ${formattedDate}</h4>
                <p>D√©tails du planning pour cette journ√©e</p>
            `;
        }
    }
    
    function sendDateToBusinessCentral(selectedDate) {
        try {
            // V√©rifier si l'API Business Central est disponible
            if (typeof Microsoft !== 'undefined' && 
                Microsoft.Dynamics && 
                Microsoft.Dynamics.NAV &&
                typeof Microsoft.Dynamics.NAV.InvokeExtensibilityMethod === 'function') {
                
                console.log("üì§ Envoi vers Business Central:", selectedDate);
                
                // Appeler l'√©v√©nement AL
                Microsoft.Dynamics.NAV.InvokeExtensibilityMethod("OnDateChanged", [selectedDate]);
                
                // Mise √† jour succ√®s
                updateStatus("‚úÖ Envoy√© √† AL", "#107c10");
                
                setTimeout(() => {
                    const planningData = document.getElementById("planningData");
                    if (planningData) {
                        planningData.innerHTML = `
                            <div style="margin-top: 20px; padding: 15px; background-color: #f0f9ff; border-left: 4px solid #0078d4;">
                                <p><strong>Date s√©lectionn√©e:</strong> ${formatDate(selectedDate)}</p>
                                <p><strong>Statut:</strong> Transmis √† AL avec succ√®s</p>
                            </div>
                        `;
                    }
                }, 500);
                
            } else {
                throw new Error("API Business Central non disponible");
            }
            
        } catch (error) {
            console.error("‚ùå Erreur envoi AL:", error);
            
            // Mode d√©veloppement/test
            updateStatus("‚ö†Ô∏è Mode test", "#ff8c00");
            
            const planningData = document.getElementById("planningData");
            if (planningData) {
                planningData.innerHTML = `
                    <div style="margin-top: 20px; padding: 15px; background-color: #fff3cd; border-left: 4px solid #ff8c00;">
                        <p><strong>Date s√©lectionn√©e:</strong> ${formatDate(selectedDate)}</p>
                        <p><strong>Mode:</strong> Test/D√©veloppement</p>
                        <p><strong>Note:</strong> L'API Business Central sera disponible une fois d√©ploy√©</p>
                    </div>
                `;
            }
        }
    }
    
    // Fonction pour mettre √† jour le calendrier avec des √©v√©nements provenant de BC
    window.updateCalendarEvents = function(eventsJSON) {
        if (!window.planningCalendar) return;
        
        console.log("üìä Mise √† jour des √©v√©nements du calendrier");
        
        try {
            // Supprimer les √©v√©nements existants
            window.planningCalendar.getEventSources().forEach(source => source.remove());
            
            // Analyser le JSON re√ßu de Business Central
            let events = [];
            
            if (eventsJSON && eventsJSON.trim() !== '') {
                // Essayer de parser le JSON
                try {
                    events = JSON.parse(eventsJSON);
                    console.log(`üìÖ ${events.length} √©v√©nements charg√©s depuis AL`);
                } catch (parseError) {
                    console.error("‚ùå Erreur de parsing JSON:", parseError);
                    console.log("JSON re√ßu:", eventsJSON);
                }
            }
            
            // Ajouter les nouveaux √©v√©nements au calendrier
            if (Array.isArray(events) && events.length > 0) {
                window.planningCalendar.addEventSource(events);
                
                // Mettre √† jour le statut
                updateStatus(`‚úÖ ${events.length} √©v√©nements charg√©s`, "#107c10");
            } else {
                console.log("‚ÑπÔ∏è Aucun √©v√©nement √† ajouter ou format incorrect");
                
                // En mode d√©veloppement, ajouter des √©v√©nements de test
                if (typeof Microsoft === 'undefined') {
                    addSampleEvents();
                    updateStatus("‚ö†Ô∏è Mode test - √âv√©nements de d√©monstration", "#ff8c00");
                } else {
                    updateStatus("‚ÑπÔ∏è Aucun √©v√©nement disponible", "#605e5c");
                }
            }
        } catch (error) {
            console.error("‚ùå Erreur lors de la mise √† jour des √©v√©nements:", error);
            updateStatus("‚ùå Erreur calendrier", "#d13438");
        }
    };
    
    function notifyControlReady() {
        try {
            if (typeof Microsoft !== 'undefined' && 
                Microsoft.Dynamics && 
                Microsoft.Dynamics.NAV &&
                typeof Microsoft.Dynamics.NAV.InvokeExtensibilityMethod === 'function') {
                
                Microsoft.Dynamics.NAV.InvokeExtensibilityMethod("OnControlReady", []);
                console.log("üì¢ Notification OnControlReady envoy√©e");
            }
        } catch (error) {
            console.log("‚ÑπÔ∏è OnControlReady non disponible (mode dev)");
        }
    }
    
    function formatDate(dateString) {
        try {
            const date = new Date(dateString + 'T00:00:00');
            return date.toLocaleDateString('fr-FR', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        } catch (e) {
            return dateString;
        }
    }
    
    // === POINTS D'ENTR√âE ===
    
    // 1. StartupScript - s'ex√©cute imm√©diatement
    console.log("üéØ StartupScript d√©marr√©");
    
    // 2. DOM Ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeCalendar);
    } else if (document.readyState === 'interactive' || document.readyState === 'complete') {
        // DOM d√©j√† pr√™t
        initializeCalendar();
    }
    
    // 3. Window load (backup)
    window.addEventListener('load', function() {
        if (!window.CalendarInitialized) {
            console.log("üîÑ Initialisation via window.load");
            initializeCalendar();
        }
    });
    
    // 4. Timeout de s√©curit√©
    setTimeout(function() {
        if (!window.CalendarInitialized) {
            console.log("‚è∞ Initialisation via timeout de s√©curit√©");
            initializeCalendar();
        }
    }, 500);
    
    console.log("üìã Script calender.js charg√© et configur√©");
    
})();