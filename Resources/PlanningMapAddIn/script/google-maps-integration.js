// google-maps-integration.js - Script d'int√©gration pour GoMaps.pro (bas√© sur Google Maps)
(function () {
    // Variables globales
    let map;
    let markers = [];
    let infoWindows = [];
    let directionsService;
    let directionsRenderer;
    let apiKey = '';
    
    // Initialisation de la carte
    window.initGoogleMap = function() {
        console.log("üöÄ Initialisation de GoMaps.pro...");
        
        // Cr√©er l'√©l√©ment de script pour GoMaps
        const script = document.createElement('script');
        script.src = 'https://app.gomaps.pro/maps/api/js?key=' + apiKey + '&callback=googleMapCallback';
        script.async = true;
        script.defer = true;
        document.head.appendChild(script);
        
        // Cr√©er l'interface de la carte
        createMapInterface();
    };
    
    // Callback appel√© quand l'API Maps est charg√©e
    window.googleMapCallback = function() {
        console.log("‚úÖ API GoMaps.pro charg√©e");
        
        try {
            // Options par d√©faut de la carte
            const mapOptions = {
                center: { lat: 48.856614, lng: 2.3522219 }, // Paris par d√©faut
                zoom: 6,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            
            // Cr√©er la carte
            map = new google.maps.Map(document.getElementById('map'), mapOptions);
            
            // Initialiser les services de directions
            directionsService = new google.maps.DirectionsService();
            directionsRenderer = new google.maps.DirectionsRenderer({
                map: map,
                suppressMarkers: false,
                polylineOptions: {
                    strokeColor: '#0078D4',
                    strokeWeight: 5
                }
            });
            
            // Notifier BC que la carte est pr√™te
            notifyControlReady();
            
            // Mettre √† jour le statut
            updateStatus("‚úÖ Carte pr√™te");
        } catch (error) {
            console.error("‚ùå Erreur lors de l'initialisation de la carte:", error);
            updateStatus("‚ùå Erreur d'initialisation");
            
            // Fallback √† une carte simple si l'API √©choue
            initFallbackMap();
        }
    };
    
    // Initialiser une carte de secours si l'API √©choue
    function initFallbackMap() {
        try {
            // Cr√©er une image statique comme fallback
            const mapContainer = document.getElementById('map');
            if (mapContainer) {
                mapContainer.innerHTML = `
                    <div style="text-align: center; padding: 20px;">
                        <p>‚ö†Ô∏è Impossible de charger la carte interactive.</p>
                        <img src="https://app.gomaps.pro/maps/api/staticmap?center=48.856614,2.3522219&zoom=5&size=600x400&key=${apiKey}" 
                             alt="Carte statique" style="max-width: 100%; border: 1px solid #ccc;">
                    </div>
                `;
            }
            
            // Notifier BC que la carte est pr√™te (m√™me en mode d√©grad√©)
            notifyControlReady();
        } catch (error) {
            console.error("‚ùå Erreur lors de l'initialisation de la carte de secours:", error);
            updateStatus("‚ùå Erreur critique - Aucune carte disponible");
        }
    }
    
    // Cr√©er l'interface de la carte
    function createMapInterface() {
        // Nettoyer le contenu existant
        document.body.innerHTML = '';
        
        // Cr√©er la structure HTML
        const mapHTML = `
            <div id="mapWrapper">
                <div id="planningMapContainer">
                    <div id="mapHeader">
                        <h3>üó∫Ô∏è Carte Planning</h3>
                        <div id="mapStatus">‚è≥ Chargement...</div>
                    </div>
                    <div id="map"></div>
                </div>
                <div id="mapDetails">
                    <h3>üìã D√©tails Itin√©raire</h3>
                    <div id="selectedLocationInfo">
                        <p>üëâ S√©lectionnez un point sur la carte</p>
                    </div>
                    <div id="routeData"></div>
                </div>
            </div>
        `;
        
        document.body.innerHTML = mapHTML;
        
        // Ajouter des styles CSS
        const styleElement = document.createElement('style');
        styleElement.textContent = `
            #mapWrapper {
                display: flex;
                flex-direction: column;
                height: 100%;
                width: 100%;
            }
            #planningMapContainer {
                flex: 1;
                display: flex;
                flex-direction: column;
                min-height: 300px;
            }
            #mapHeader {
                display: flex;
                justify-content: space-between;
                padding: 5px 10px;
                background-color: #f0f0f0;
                border-bottom: 1px solid #ddd;
            }
            #map {
                flex: 1;
                min-height: 300px;
                position: relative;
            }
            #mapDetails {
                max-height: 200px;
                overflow-y: auto;
                padding: 10px;
                border-top: 1px solid #ddd;
            }
        `;
        document.head.appendChild(styleElement);
    }
    
    // Mettre √† jour le statut de la carte
    function updateStatus(message) {
        const statusElement = document.getElementById('mapStatus');
        if (statusElement) {
            statusElement.textContent = message;
        }
    }
    
    // Mettre √† jour les localisations sur la carte
    window.UpdateLocations = function(locationsJSON) {
        try {
            // Analyser les donn√©es JSON
            const data = JSON.parse(locationsJSON);
            console.log("üìç Mise √† jour des localisations", data);
            
            // S'assurer que la carte est initialis√©e
            if (!map) {
                console.warn("‚ö†Ô∏è La carte n'est pas encore initialis√©e");
                return;
            }
            
            // Nettoyer les marqueurs existants
            clearMarkers();
            
            // Ajouter les nouveaux marqueurs
            const locations = data.locations || [];
            addMarkersToMap(locations);
            
            // Centrer la carte sur tous les marqueurs
            fitMapToMarkers();
            
        } catch (error) {
            console.error("‚ùå Erreur lors de la mise √† jour des localisations:", error);
        }
    };
    
    // Ajouter des marqueurs √† la carte
    function addMarkersToMap(locations) {
        if (!map || !locations || locations.length === 0) {
            return;
        }
        
        console.log(`üó∫Ô∏è Ajout de ${locations.length} localisations √† la carte`);
        
        // Cr√©er les marqueurs pour chaque localisation
        locations.forEach(location => {
            if (!location.coordinates || !location.coordinates.latitude || !location.coordinates.longitude) {
                console.warn(`‚ö†Ô∏è Coordonn√©es manquantes pour la location ${location.id}`);
                return;
            }
            
            try {
                // Cr√©er le point sur la carte
                const position = {
                    lat: parseFloat(location.coordinates.latitude),
                    lng: parseFloat(location.coordinates.longitude)
                };
                
                // D√©terminer la couleur du marqueur (par d√©faut: rouge)
                const markerColor = location.markerColor || '#d13438';
                
                // Cr√©er le marqueur
                const marker = new google.maps.Marker({
                    position: position,
                    map: map,
                    title: location.title || 'Sans titre',
                    label: location.id.toString().substr(0, 1)
                });
                
                // Cr√©er une infowindow (popup)
                const infoContent = `
                    <div class="info-window">
                        <h4>${location.title || 'Sans titre'}</h4>
                        <p>${formatLocationDetails(location)}</p>
                        <button onclick="selectLocation('${location.id}', '${JSON.stringify(location).replace(/'/g, "\\'")}')">S√©lectionner</button>
                    </div>
                `;
                
                const infoWindow = new google.maps.InfoWindow({
                    content: infoContent
                });
                
                // Ajouter un gestionnaire d'√©v√©nements de clic sur le marqueur
                marker.addListener('click', () => {
                    // Fermer toutes les autres infowindows
                    infoWindows.forEach(info => info.close());
                    
                    // Ouvrir l'infowindow pour ce marqueur
                    infoWindow.open(map, marker);
                    
                    // S√©lectionner la localisation
                    window.selectLocation(location.id, JSON.stringify(location));
                });
                
                // Stocker les r√©f√©rences pour nettoyage ult√©rieur
                markers.push(marker);
                infoWindows.push(infoWindow);
                
            } catch (error) {
                console.error(`‚ùå Erreur lors de l'ajout du marqueur pour ${location.id}:`, error);
            }
        });
    }
    
    // Formater les d√©tails d'une localisation pour l'infowindow
    function formatLocationDetails(location) {
        let details = '';
        
        if (location.address && location.address.formatted) {
            details += `<strong>Adresse:</strong> ${location.address.formatted}<br>`;
        }
        
        if (location.type) {
            details += `<strong>Type:</strong> ${location.type}<br>`;
        }
        
        if (location.priority) {
            details += `<strong>Priorit√©:</strong> ${location.priority}<br>`;
        }
        
        if (location.date) {
            details += `<strong>Date:</strong> ${location.date}<br>`;
        }
        
        return details;
    }
    
    // S√©lectionner une localisation
    window.selectLocation = function(locationId, locationInfo) {
        try {
            // Mettre √† jour l'affichage des d√©tails
            updateSelectedLocationDisplay(locationInfo);
            
            // Notifier BC de la s√©lection
            notifyLocationSelected(locationId, locationInfo);
        } catch (error) {
            console.error("‚ùå Erreur lors de la s√©lection de la localisation:", error);
        }
    };
    
    // Mettre √† jour l'affichage des d√©tails de la localisation s√©lectionn√©e
    function updateSelectedLocationDisplay(locationInfo) {
        try {
            const locationData = typeof locationInfo === 'string' ? JSON.parse(locationInfo) : locationInfo;
            const element = document.getElementById('selectedLocationInfo');
            
            if (element && locationData) {
                let html = `
                    <h4>üìå ${locationData.title || 'Localisation'}</h4>
                    <p>üÜî ID: ${locationData.id}</p>
                `;
                
                if (locationData.address && locationData.address.formatted) {
                    html += `<p>üìç Adresse: ${locationData.address.formatted}</p>`;
                }
                
                if (locationData.type) {
                    html += `<p>üìã Type: ${locationData.type}</p>`;
                }
                
                if (locationData.priority) {
                    html += `<p>üîî Priorit√©: ${locationData.priority}</p>`;
                }
                
                if (locationData.date) {
                    html += `<p>üìÖ Date: ${locationData.date}</p>`;
                }
                
                if (locationData.coordinates) {
                    html += `<p>üåê Coordonn√©es: ${locationData.coordinates.latitude}, ${locationData.coordinates.longitude}</p>`;
                }
                
                element.innerHTML = html;
            }
        } catch (error) {
            console.error("‚ùå Erreur lors de la mise √† jour de l'affichage:", error);
        }
    }
    
    // Mettre en √©vidence une localisation
    window.HighlightLocation = function(locationId) {
        // Trouver le marqueur correspondant √† l'ID
        const marker = markers.find((m, index) => {
            // Ici nous utilisons l'index car Google Maps n'attache pas de m√©tadonn√©es aux marqueurs
            // Dans une impl√©mentation r√©elle, vous pourriez stocker l'ID dans un tableau parall√®le
            return index === parseInt(locationId) - 1;
        });
        
        if (marker) {
            // Centrer la carte sur ce marqueur
            map.setCenter(marker.getPosition());
            map.setZoom(Math.max(map.getZoom(), 15)); // Zoom un peu plus pr√®s
            
            // D√©clencher l'√©v√©nement de clic sur le marqueur
            google.maps.event.trigger(marker, 'click');
        } else {
            console.warn(`‚ö†Ô∏è Aucun marqueur trouv√© avec l'ID ${locationId}`);
        }
    };
    
    // Nettoyer les marqueurs existants
    function clearMarkers() {
        // Fermer toutes les infowindows
        infoWindows.forEach(infoWindow => infoWindow.close());
        infoWindows = [];
        
        // Supprimer les marqueurs de la carte
        markers.forEach(marker => marker.setMap(null));
        markers = [];
    }
    
    // Ajuster la vue de la carte pour inclure tous les marqueurs
    function fitMapToMarkers() {
        if (!map || markers.length === 0) {
            return;
        }
        
        // Cr√©er les limites de la carte
        const bounds = new google.maps.LatLngBounds();
        
        // Ajouter tous les marqueurs aux limites
        markers.forEach(marker => {
            bounds.extend(marker.getPosition());
        });
        
        // Ajuster la vue pour inclure tous les marqueurs
        map.fitBounds(bounds);
        
        // Si le zoom est trop √©lev√© (quand il n'y a qu'un seul marqueur), le r√©duire
        const zoomChangeListener = google.maps.event.addListener(map, 'idle', () => {
            if (map.getZoom() > 15) {
                map.setZoom(15);
            }
            google.maps.event.removeListener(zoomChangeListener);
        });
    }
    
    // Calculer un itin√©raire optimal
    window.CalculateOptimalRoute = function(startLocationId, algorithm) {
        try {
            console.log(`üõ£Ô∏è Calcul d'itin√©raire depuis ${startLocationId}`);
            
            // S'assurer que la carte et les services de directions sont initialis√©s
            if (!map || !directionsService || !directionsRenderer) {
                console.warn("‚ö†Ô∏è Les services de directions ne sont pas initialis√©s");
                return;
            }
            
            // S'assurer qu'il y a au moins deux marqueurs
            if (markers.length < 2) {
                console.warn("‚ö†Ô∏è Au moins deux points sont n√©cessaires pour calculer un itin√©raire");
                updateStatus("‚ö†Ô∏è Au moins deux points sont n√©cessaires");
                return;
            }
            
            // Mise √† jour du statut
            updateStatus("‚è≥ Calcul de l'itin√©raire...");
            
            // R√©cup√©rer le point de d√©part
            let startIndex = 0;
            if (startLocationId && startLocationId !== '0') {
                startIndex = parseInt(startLocationId) - 1;
                if (isNaN(startIndex) || startIndex < 0 || startIndex >= markers.length) {
                    startIndex = 0;
                }
            }
            
            // Configurer la requ√™te de directions
            const request = {
                origin: markers[startIndex].getPosition(),
                destination: markers[markers.length - 1].getPosition(),
                waypoints: markers.slice(1, markers.length - 1).map(marker => ({
                    location: marker.getPosition(),
                    stopover: true
                })),
                optimizeWaypoints: true,
                travelMode: google.maps.TravelMode.DRIVING
            };
            
            // Calculer l'itin√©raire
            directionsService.route(request, (result, status) => {
                if (status === google.maps.DirectionsStatus.OK) {
                    // Afficher l'itin√©raire sur la carte
                    directionsRenderer.setDirections(result);
                    
                    // Afficher les d√©tails de l'itin√©raire
                    displayRouteDetails(result);
                    
                    // Mettre √† jour le statut
                    updateStatus("‚úÖ Itin√©raire calcul√©");
                } else {
                    console.error("‚ùå Erreur lors du calcul de l'itin√©raire:", status);
                    updateStatus("‚ùå Erreur de calcul");
                }
            });
        } catch (error) {
            console.error("‚ùå Erreur lors du calcul de l'itin√©raire:", error);
            updateStatus("‚ùå Erreur de calcul");
        }
    };
    
    // Afficher les d√©tails de l'itin√©raire
    function displayRouteDetails(result) {
        try {
            const route = result.routes[0];
            if (!route) return;
            
            // Calculer la distance et le temps totaux
            let totalDistance = 0;
            let totalDuration = 0;
            
            route.legs.forEach(leg => {
                totalDistance += leg.distance.value;
                totalDuration += leg.duration.value;
            });
            
            // Convertir en unit√©s plus lisibles
            const distanceInKm = (totalDistance / 1000).toFixed(2);
            const durationInMinutes = Math.round(totalDuration / 60);
            
            // Pr√©parer l'information sur l'itin√©raire
            const routeInfo = {
                distance: distanceInKm,
                time: durationInMinutes,
                waypoints: route.legs.length + 1,
                legs: route.legs.map(leg => ({
                    from: leg.start_address,
                    to: leg.end_address,
                    distance: (leg.distance.value / 1000).toFixed(2),
                    time: Math.round(leg.duration.value / 60)
                }))
            };
            
            // Mettre √† jour l'affichage des d√©tails de l'itin√©raire
            const routeDataElement = document.getElementById('routeData');
            if (routeDataElement) {
                routeDataElement.innerHTML = `
                    <div class="route-summary">
                        <h4>üìä R√©sum√© de l'itin√©raire</h4>
                        <p>üìç Points d'arr√™t: ${routeInfo.waypoints}</p>
                        <p>üõ£Ô∏è Distance totale: ${routeInfo.distance} km</p>
                        <p>‚è±Ô∏è Temps estim√©: ${routeInfo.time} min</p>
                    </div>
                `;
            }
            
            // Notifier BC des r√©sultats de l'itin√©raire
            notifyRouteCalculated(JSON.stringify(routeInfo), parseFloat(distanceInKm), durationInMinutes);
        } catch (error) {
            console.error("‚ùå Erreur lors de l'affichage des d√©tails de l'itin√©raire:", error);
        }
    }
    
    // Effacer l'itin√©raire
    window.ClearRoute = function() {
        try {
            if (directionsRenderer) {
                directionsRenderer.setDirections({ routes: [] });
            }
            
            // Effacer les d√©tails de l'itin√©raire
            const routeDataElement = document.getElementById('routeData');
            if (routeDataElement) {
                routeDataElement.innerHTML = '';
            }
            
            // S'assurer que tous les marqueurs sont visibles
            markers.forEach(marker => {
                marker.setVisible(true);
            });
            
            // Mettre √† jour le statut
            updateStatus("‚úÖ Itin√©raire effac√©");
        } catch (error) {
            console.error("‚ùå Erreur lors de l'effacement de l'itin√©raire:", error);
        }
    };
    
    // D√©finir la cl√© API (non utilis√©e pour Google Maps si vous utilisez la version sans cl√©)
    window.SetBingMapsKey = function(apiKey) {
        console.log("‚ÑπÔ∏è SetBingMapsKey appel√© mais non utilis√© pour GoMaps.pro");
    };
    
    // D√©finir la cl√© API Google Maps
    window.SetGoogleMapsKey = function(newApiKey) {
        console.log("üîë Configuration de la cl√© API GoMaps.pro");
        
        // Mettre √† jour la cl√© API
        apiKey = newApiKey;
        
        // Si la carte est d√©j√† initialis√©e, recharger avec la nouvelle cl√©
        if (map) {
            // Supprimer les scripts existants
            const scripts = document.querySelectorAll('script');
            scripts.forEach(script => {
                if (script.src && script.src.includes('gomaps.pro')) {
                    script.parentNode.removeChild(script);
                }
            });
            
            // Recharger la carte
            initGoogleMap();
        }
        
        console.log("‚úÖ Cl√© API GoMaps.pro configur√©e");
    };
    
    // D√©finir les param√®tres de la carte
    window.SetMapParameters = function(mapParamsJSON) {
        try {
            const params = JSON.parse(mapParamsJSON);
            console.log("‚öôÔ∏è Mise √† jour des param√®tres de la carte", params);
            
            // Mettre √† jour la configuration si la carte est d√©j√† initialis√©e
            if (map) {
                // Mettre √† jour le centre si n√©cessaire
                if (params.defaultLocation) {
                    map.setCenter({
                        lat: params.defaultLocation.latitude,
                        lng: params.defaultLocation.longitude
                    });
                }
                
                // Mettre √† jour le zoom si n√©cessaire
                if (params.zoom) {
                    map.setZoom(params.zoom);
                }
                
                // Mettre √† jour le type de carte si n√©cessaire
                if (params.mapType) {
                    switch (params.mapType.toLowerCase()) {
                        case 'aerial':
                        case 'satellite':
                            map.setMapTypeId(google.maps.MapTypeId.SATELLITE);
                            break;
                        case 'hybrid':
                            map.setMapTypeId(google.maps.MapTypeId.HYBRID);
                            break;
                        case 'terrain':
                            map.setMapTypeId(google.maps.MapTypeId.TERRAIN);
                            break;
                        default:
                            map.setMapTypeId(google.maps.MapTypeId.ROADMAP);
                            break;
                    }
                }
            }
        } catch (error) {
            console.error("‚ùå Erreur lors de la mise √† jour des param√®tres de la carte:", error);
        }
    };
    
    // Fonction pour notifier BC que le contr√¥le est pr√™t
    function notifyControlReady() {
        try {
            if (typeof Microsoft !== 'undefined' && 
                Microsoft.Dynamics && 
                Microsoft.Dynamics.NAV &&
                typeof Microsoft.Dynamics.NAV.InvokeExtensibilityMethod === 'function') {
                
                Microsoft.Dynamics.NAV.InvokeExtensibilityMethod("OnControlReady", []);
                console.log("üì¢ Notification OnControlReady envoy√©e");
            }
        } catch (error) {
            console.log("‚ÑπÔ∏è OnControlReady non disponible (mode dev)");
        }
    }
    
    // Fonction pour notifier BC des r√©sultats de l'itin√©raire
    function notifyRouteCalculated(routeInfo, totalDistance, totalTime) {
        try {
            if (typeof Microsoft !== 'undefined' && 
                Microsoft.Dynamics && 
                Microsoft.Dynamics.NAV &&
                typeof Microsoft.Dynamics.NAV.InvokeExtensibilityMethod === 'function') {
                
                Microsoft.Dynamics.NAV.InvokeExtensibilityMethod("OnRouteCalculated", [routeInfo, totalDistance, totalTime]);
                console.log("üì¢ Notification OnRouteCalculated envoy√©e");
            }
        } catch (error) {
            console.log("‚ÑπÔ∏è OnRouteCalculated non disponible (mode dev)");
        }
    }
    
    // Fonction pour notifier BC de la s√©lection d'un emplacement
    function notifyLocationSelected(locationId, locationInfo) {
        try {
            if (typeof Microsoft !== 'undefined' && 
                Microsoft.Dynamics && 
                Microsoft.Dynamics.NAV &&
                typeof Microsoft.Dynamics.NAV.InvokeExtensibilityMethod === 'function') {
                
                Microsoft.Dynamics.NAV.InvokeExtensibilityMethod("OnLocationSelected", [locationId, locationInfo]);
                console.log("üì¢ Notification OnLocationSelected envoy√©e");
            }
        } catch (error) {
            console.log("‚ÑπÔ∏è OnLocationSelected non disponible (mode dev)");
        }
    }
    
    // Initialiser la carte au chargement de la page
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', window.initGoogleMap);
    } else {
        window.initGoogleMap();
    }
})(); 